import fs from 'fs';
/**
 * @description Helper class that processes uploaded json files
 * or raw objects
 */
export default class JSONProcessor {
  /**
   * @description - Processes raw javascript object provided
   * by the /api/create route
   * @param {object} body - javascript json object
   * @param {InvertedIndex} iIndex - An instance of InvertedIndex class
   * @return {object|string}  - An object containing generated indices or
   * error message
   */
  static processRaw(body, iIndex) {
    const fileNames = Object.keys(body);
    let index;
    fileNames.forEach((fileName) => {
      const fileContent = body[fileName];
      index = iIndex.createIndex(fileName, fileContent);
    });
    return index;
  }
  /**
   * @description - Helper method that helps inverted-index api to
   * file uploads
   * @param {Array} files - file fields generated by multer
   * @param {InvertedIndex} iIndex -An instance of inverted index
   * @returns {object|string} - Generated index or erro message
   */
  static processFiles(files, iIndex) {
    let books;
    let index;
    let filePath;
    try {
      files.forEach((file) => {
        const fileType = file.mimetype.toLowerCase();
        filePath = `${process.cwd()}/uploads/${file.filename}`;
        // if the file is json
        if (fileType === 'application/json') {
          const options = { encoding: 'utf-8' };
          books = fs.readFileSync(filePath, options);
          books = books.toString();
          try {
            books = JSON.parse(books);
            index = iIndex.createIndex(file.filename, books);
          } catch (error) {
            throw new Error('Error: invalid json file');
          }
        } else {
          throw new Error('invalid file: upload json file');
        }
      });
    } catch (error) {
      index = error.message;
    }
    return index;
  }
}
